// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This block tells Prisma what kind of client to generate.
// Yours is for Dart, which is correct for your project.
generator client {
  provider = "preview-dart"
  output   = "../src/generated/prisma"
}

// This block connects to your Supabase database.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// =================================================================
// DATABASE MODELS START HERE
// Each "model" block below will become a table in your database.
// =================================================================

model Manufacturer {
  id        String   @id @default(cuid())
  name      String   @unique // We ensure no duplicate manufacturer names.
  
  // A Manufacturer can have many Series and many Components.
  series    Series[]
  components Component[]
}

model Series {
  id              String   @id @default(cuid())
  name            String
  
  // Every Series belongs to one Manufacturer. This creates the link.
  manufacturer    Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId  String

  // A Series can have many Components.
  components      Component[]

  // Ensures that the combination of a series name and a manufacturer is unique.
  // e.g., there can be a "Deore" from Shimano and a "Deore" from another brand,
  // but there can't be two "Deore" series from Shimano.
  @@unique([name, manufacturerId])
}

model Component {
  id              String      @id // Our human-readable ID from the spreadsheet.
  model_name      String?
  year            Int?
  weight_grams    Int?
  bike_type       String?     // e.g., "mtb", "road"
  msrp_usd        Float?

  // Every Component belongs to one Manufacturer and one Series.
  manufacturer    Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId  String
  series          Series      @relation(fields: [seriesId], references: [id])
  seriesId        String

  // A component can have ONE of the following detail records.
  // This is how we store specific info for each component type.
  details_cassette        DetailsCassette?
  details_rear_derailleur DetailsRearDerailleur?
  details_crankset        DetailsCrankset?
}


// --- DETAIL TABLES ---
// These models store the specific data for each type of component.

model DetailsCassette {
  id                  String   @id @default(cuid())
  componentId         String   @unique
  speeds              Int
  cogs                String[] // An array of strings, e.g., ["10", "12", ...]
  freehub_type        String
  chain_compatibility String?

  // This sets up the one-to-one relationship with the main Component table.
  component           Component @relation(fields: [componentId], references: [id])
}

model DetailsRearDerailleur {
  id                  String   @id @default(cuid())
  componentId         String   @unique
  speeds              Int
  max_cog             Int
  min_cog             Int
  clutch_type         String
  cage_length         String
  actuation           String
  mount_type          String

  // This sets up the one-to-one relationship.
  component           Component @relation(fields: [componentId], references: [id])
}

model DetailsCrankset {
  id              String   @id @default(cuid())
  componentId     String   @unique
  speeds          Int
  chainring_setup String?  // e.g., "1x (30-36T)"
  chainline_mm    Float?
  q_factor_mm     Float?

  // This sets up the one-to-one relationship.
  component       Component @relation(fields: [componentId], references: [id])
}
